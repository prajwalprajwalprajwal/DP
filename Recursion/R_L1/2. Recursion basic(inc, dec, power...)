// Function - 1. print no. in increasing
// Function - 2. print no. in decreasing
// Function - 3. index of the element
//Function  - 4. Factorial
// Function - 5. power
// Function - 6. Power_better
// Function - 7. display
// Function - 8.first index of the 
// Function - 9. 
// Function - 10.
// Function - 11.
//Function  - 12.





#include <iostream>
#include<string>
#include<bits/stdc++.h>
using namespace std;
//1
void printinc(int a, int b)
{
    if(b>a)
    {
        return;
    }
    cout<<b<<endl;
    printinc(a, b+1);
}

//2
void printdec(int a, int b)
{
    if(b>a)
    return;
    printdec(a,b+1);
    cout<<b<<endl;
}

//3
void printid(int a, int b)
{
    if(b>a)
    return;
    
    cout<<b<<endl;
    printid(a,b+1);
    cout<<b<<endl;
}

//4
int fact(int a)
{
    if(a==0)
    return 1;
    int ans = fact(a-1);
    return ans*a;
}

//5
int power(int a, int b)
{   if(b==0)
return 1;
    
    int ans = power(a,b-1);
    return ans*a;
}

//6
int power_better(int a, int b)
{
    if(b==0)
    return 1;
    int ans = power_better(a,b/2);
    ans*=ans;
    return ans* (b%2==0? 1 : a);
}

//7
void display(int arr[], int ind,int n)
{
    if(ind==10)
    {
        return;
    }
    cout<<arr[ind]<<endl;
    display(arr, ind+1,n);
}

//8
int firstindex(int arr[],int n,int find)
{
    if(n<0)
    return -1;
    int ans=firstindex(arr,n-1,find);
    if(ans!=-1)
    {
        return ans;
    }
    
    return arr[n]==find?n:-1;
}

//9
int lastindex (int arr[],int ind, int n, int find)
{
    if(ind==n)
    return -1;
    int ans = lastindex(arr, ind+1,n,find);
    if(ans!=-1)
    {
        return ans;
    }
    
    return arr[ind]==find?ind : -1;
}

//10
int subsequence(string s, int n,string ans)
{
    if(n<=0)
    {
        cout<<ans<<endl;
        return 1;
    }
    int count=0;
    count=count+subsequence(s,n-1,ans);
    count=count+subsequence(s,n-1,ans+s[n-1]);
    
    return count;
}

//11
//if jumps==1,2,3
int paths(int n, string ans)
{
     if(n==0)
    {cout<<ans<<endl;
         return 1;
    
     }
    if(n<0)
    return 0;
    int count=0;
    count+=paths(n-1,ans+"1");
    count+=paths(n-2,ans+"4");
    count+=paths(n-3,ans+"8");
    // int count=0;
    // for(int i=1;i<=3 && n-i>=0 ;i++)
    // {
    //     string str= to_string(i);
    //     count=count+paths(n-i,ans+str);
    // }
    
    return count;
}




//12
int variablejumps(vector<int> arr, int n, string ans)
{
    if(n==0)
    {
        cout<<ans<<endl;
        //cout<<n<<"ddd"<<endl;
        return 1;
    }
    int count=0;
    for(int i=0;i<arr.size() && n-arr[i]>=0;i++)
    {
        string str=to_string(arr[i]);
        //cout<<str<<"dd "<<i<<endl;
        //cout<<"n "<<n-arr[i]<<endl;
        count+=variablejumps(arr,n-arr[i],ans+str);
    }
    return count;
}




int main()
{
 int a=10;
 //printinc(a,0);
 //printdec(a,0);
 //cout<<"-------------"<<endl<<endl;
 //printid(a,0);
 //cout<<"-------------"<<endl<<endl;
 //cout<<fact(4)<<endl;
 //cout<<power_better(5,2)<<endl;
//  int arr[10];
//  for(int i=0;i<10;i++)
//  {
//      arr[i]=i;
//  }
//  arr[4]=9;
 
//  display(arr,0,10);
//  cout<<firstindex(arr,9,99)<<endl;
//  cout<<lastindex(arr,0,10,9)<<endl;
// string s = "abc";
// string ans="";
// cout<<subsequence(s,3,ans)<<endl;
string ans="";
//cout<<paths(6,ans)<<endl;
vector<int> arr={3,2,1};
cout<<variablejumps(arr,3,ans)<<endl;
  return 0;
}
